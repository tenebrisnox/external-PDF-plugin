/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ExternalPDFPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultHeight: "600px",
  restrictDomains: false,
  allowedDomains: ["drive.google.com", "dropbox.com", "onedrive.live.com", "github.com"],
  showPDFPreview: true,
  enableQuickActions: true,
  maxFileSize: 50,
  // 50MB
  pdfJsWorkerUrl: "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js",
  defaultScale: 1.2
};
var ExternalPDFSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "External PDF Plugin" });
    const infoDiv = containerEl.createEl("div", { cls: "external-pdf-info" });
    infoDiv.innerHTML = `
            <p><strong>Embed external PDFs directly in your notes with full viewer controls.</strong></p>
            
            <h3>\u{1F4D6} How to Use</h3>
            <p>Add a code block with <code>external-pdf</code> language and paste your PDF URL:</p>
            
            <pre><code>\`\`\`external-pdf
https://example.com/document.pdf
title: My Document Title
height: 500px
\`\`\`</code></pre>
            
            <h3>\u{1F527} Supported Options</h3>
            <ul>
                <li><strong>title:</strong> Display name for the PDF</li>
                <li><strong>height:</strong> Viewer height (e.g., 600px, 80vh, 400)</li>
            </ul>
            
            <h3>\u{1F310} Supported Sources</h3>
            <ul>
                <li>Google Drive (sharing links)</li>
                <li>Dropbox (sharing links)</li>
                <li>OneDrive (sharing links)</li>
                <li>GitHub (raw PDF files)</li>
                <li>Any direct HTTPS PDF URL</li>
            </ul>
            
            <h3>\u{1F4F1} Features</h3>
            <ul>
                <li>Mobile-optimized with touch gestures</li>
                <li>Keyboard navigation (arrows, space, +/- zoom)</li>
                <li>Page controls and zoom options</li>
                <li>Fit-to-width mode</li>
                <li>Pinch-to-zoom on mobile</li>
                <li>Swipe gestures for page navigation</li>
            </ul>
        `;
    containerEl.createEl("h3", { text: "Settings" });
    new import_obsidian.Setting(containerEl).setName("Default height").setDesc("Default height for PDF viewers (e.g., 600px, 70vh)").addText((text) => text.setPlaceholder("600px").setValue(this.plugin.settings.defaultHeight).onChange(async (value) => {
      this.plugin.settings.defaultHeight = value || "600px";
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Restrict domains").setDesc("Only allow PDFs from specified domains").addToggle((toggle) => toggle.setValue(this.plugin.settings.restrictDomains).onChange(async (value) => {
      this.plugin.settings.restrictDomains = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.restrictDomains) {
      new import_obsidian.Setting(containerEl).setName("Allowed domains").setDesc("Comma-separated list of allowed domains").addTextArea((text) => text.setPlaceholder("drive.google.com, dropbox.com").setValue(this.plugin.settings.allowedDomains.join(", ")).onChange(async (value) => {
        this.plugin.settings.allowedDomains = value.split(",").map((domain) => domain.trim()).filter((domain) => domain.length > 0);
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian.Setting(containerEl).setName("Maximum file size (MB)").setDesc("Maximum allowed PDF file size").addSlider((slider) => slider.setLimits(1, 200, 5).setValue(this.plugin.settings.maxFileSize).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.maxFileSize = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default zoom scale").setDesc("Default zoom level for PDFs (1.0 = 100%)").addSlider((slider) => slider.setLimits(0.5, 3, 0.1).setValue(this.plugin.settings.defaultScale).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.defaultScale = value;
      await this.plugin.saveSettings();
    }));
  }
};
var ExternalPDFPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.stylesAdded = false;
    this.pdfJsLoaded = false;
    this.loadingPromise = null;
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ExternalPDFSettingTab(this.app, this));
    this.registerMarkdownCodeBlockProcessor("external-pdf", (source, el, ctx) => {
      this.renderExternalPDF(source, el, ctx);
    });
    console.log("External PDF Plugin loaded");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async loadPDFJS() {
    if (this.pdfJsLoaded) return;
    if (this.loadingPromise) {
      return this.loadingPromise;
    }
    this.loadingPromise = new Promise((resolve, reject) => {
      const script = document.createElement("script");
      script.src = "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js";
      script.onload = () => {
        if (window.pdfjsLib) {
          window.pdfjsLib.GlobalWorkerOptions.workerSrc = this.settings.pdfJsWorkerUrl;
          this.pdfJsLoaded = true;
          resolve();
        } else {
          reject(new Error("PDF.js failed to load"));
        }
      };
      script.onerror = () => reject(new Error("Failed to load PDF.js"));
      document.head.appendChild(script);
    });
    return this.loadingPromise;
  }
  isMobileDevice() {
    const userAgent = navigator.userAgent;
    const platform = navigator.platform;
    const isIOS = /iPad|iPhone|iPod/.test(userAgent) || platform === "MacIntel" && navigator.maxTouchPoints > 1;
    const isAndroid = /Android/.test(userAgent);
    const isMobile = /Mobi/.test(userAgent);
    const isTouchDevice = "ontouchstart" in window || navigator.maxTouchPoints > 0;
    const isSmallScreen = window.innerWidth <= 1024;
    return isIOS || isAndroid || isMobile || isTouchDevice && isSmallScreen;
  }
  isValidURL(urlString) {
    try {
      const url = new URL(urlString);
      return url.protocol === "http:" || url.protocol === "https:";
    } catch (e) {
      return false;
    }
  }
  isDomainAllowed(urlString) {
    if (!this.settings.restrictDomains) {
      try {
        const url = new URL(urlString);
        return url.protocol === "https:";
      } catch (e) {
        return false;
      }
    }
    try {
      const url = new URL(urlString);
      const hostname = url.hostname.toLowerCase();
      return this.settings.allowedDomains.some(
        (domain) => hostname === domain || hostname.endsWith("." + domain)
      );
    } catch (e) {
      return false;
    }
  }
  async fetchPDFData(url) {
    try {
      const directUrl = this.getDirectDownloadURL(url);
      const response = await (0, import_obsidian.requestUrl)({
        url: directUrl,
        method: "GET",
        headers: {
          "Accept": "application/pdf,*/*"
        }
      });
      if (!response.arrayBuffer) {
        throw new Error("No PDF data received");
      }
      const sizeInMB = response.arrayBuffer.byteLength / (1024 * 1024);
      if (sizeInMB > this.settings.maxFileSize) {
        throw new Error(`PDF file too large: ${sizeInMB.toFixed(1)}MB (max: ${this.settings.maxFileSize}MB)`);
      }
      return response.arrayBuffer;
    } catch (error) {
      console.error("Error fetching PDF:", error);
      throw error;
    }
  }
  getDirectDownloadURL(url) {
    const urlObj = new URL(url);
    const hostname = urlObj.hostname.toLowerCase();
    if (hostname.includes("drive.google.com")) {
      const fileIdMatch = url.match(/\/d\/([a-zA-Z0-9-_]+)/);
      if (fileIdMatch) {
        return `https://drive.google.com/uc?export=download&id=${fileIdMatch[1]}`;
      }
    }
    if (hostname.includes("dropbox.com")) {
      return url.replace("?dl=0", "?dl=1").replace("www.dropbox.com", "dl.dropboxusercontent.com");
    }
    if (hostname.includes("onedrive.live.com") || hostname.includes("1drv.ms")) {
      return url.replace("?e=", "&download=1&e=");
    }
    return url;
  }
  parseOptions(lines) {
    const options = {};
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line.includes(":")) {
        const colonIndex = line.indexOf(":");
        const key = line.substring(0, colonIndex).trim();
        const value = line.substring(colonIndex + 1).trim();
        options[key] = value;
      }
    }
    return options;
  }
  parseHeight(heightOption) {
    if (!heightOption) return this.settings.defaultHeight;
    if (/^\d+$/.test(heightOption)) {
      return heightOption + "px";
    }
    if (/^\d+(\.\d+)?(px|vh|vw|em|rem|%)$/i.test(heightOption)) {
      return heightOption;
    }
    return this.settings.defaultHeight;
  }
  createErrorElement(el, message) {
    el.createEl("div", {
      text: message,
      cls: "external-pdf-error"
    });
  }
  createLoadingElement(el) {
    const loadingContainer = el.createEl("div", {
      cls: "external-pdf-loading"
    });
    const spinner = loadingContainer.createEl("div", {
      cls: "external-pdf-spinner"
    });
    const loadingText = loadingContainer.createEl("div", {
      text: "Loading PDF...",
      cls: "external-pdf-loading-text"
    });
    return loadingContainer;
  }
  async createPDFJSViewer(container, pdfData, options) {
    try {
      const pdf = await window.pdfjsLib.getDocument({ data: pdfData }).promise;
      const viewerContainer = container.createEl("div", {
        cls: "external-pdf-viewer"
      });
      const controls = viewerContainer.createEl("div", {
        cls: "external-pdf-controls"
      });
      const pageControls = controls.createEl("div", {
        cls: "external-pdf-page-controls"
      });
      const prevBtn = pageControls.createEl("button", {
        text: "\u2039",
        cls: "external-pdf-nav-btn external-pdf-prev-btn"
      });
      const pageDisplay = pageControls.createEl("span", {
        cls: "external-pdf-page-display"
      });
      const nextBtn = pageControls.createEl("button", {
        text: "\u203A",
        cls: "external-pdf-nav-btn external-pdf-next-btn"
      });
      const zoomControls = controls.createEl("div", {
        cls: "external-pdf-zoom-controls"
      });
      const zoomOutBtn = zoomControls.createEl("button", {
        text: "\u2212",
        cls: "external-pdf-zoom-btn"
      });
      const zoomDisplay = zoomControls.createEl("span", {
        cls: "external-pdf-zoom-display"
      });
      const zoomInBtn = zoomControls.createEl("button", {
        text: "+",
        cls: "external-pdf-zoom-btn"
      });
      const fitWidthBtn = zoomControls.createEl("button", {
        text: "Fit",
        cls: "external-pdf-fit-btn"
      });
      const canvasContainer = viewerContainer.createEl("div", {
        cls: "external-pdf-canvas-container"
      });
      const heightValue = this.parseHeight(options.height);
      canvasContainer.style.maxHeight = heightValue;
      const canvas = canvasContainer.createEl("canvas", {
        cls: "external-pdf-canvas"
      });
      const ctx = canvas.getContext("2d");
      if (!ctx) {
        throw new Error("Failed to get canvas context");
      }
      let currentPage = 1;
      let scale = this.isMobileDevice() ? 1 : this.settings.defaultScale;
      const minScale = 0.25;
      const maxScale = 5;
      let fitToWidth = false;
      const calculateFitToWidthScale = async (pageNum) => {
        const page = await pdf.getPage(pageNum);
        const viewport = page.getViewport({ scale: 1 });
        const containerWidth = canvasContainer.clientWidth - 32;
        return containerWidth / viewport.width;
      };
      const updatePageDisplay = () => {
        pageDisplay.textContent = `${currentPage} / ${pdf.numPages}`;
        prevBtn.disabled = currentPage <= 1;
        nextBtn.disabled = currentPage >= pdf.numPages;
      };
      const updateZoomDisplay = () => {
        const displayScale = fitToWidth ? "Fit" : `${Math.round(scale * 100)}%`;
        zoomDisplay.textContent = displayScale;
        zoomOutBtn.disabled = !fitToWidth && scale <= minScale;
        zoomInBtn.disabled = !fitToWidth && scale >= maxScale;
        fitWidthBtn.classList.toggle("active", fitToWidth);
      };
      const renderPage = async (pageNum) => {
        try {
          const page = await pdf.getPage(pageNum);
          let renderScale = scale;
          if (fitToWidth) {
            renderScale = await calculateFitToWidthScale(pageNum);
          }
          const viewport = page.getViewport({ scale: renderScale });
          const outputScale = window.devicePixelRatio || 1;
          canvas.width = Math.floor(viewport.width * outputScale);
          canvas.height = Math.floor(viewport.height * outputScale);
          canvas.style.width = `${Math.floor(viewport.width)}px`;
          canvas.style.height = `${Math.floor(viewport.height)}px`;
          ctx.scale(outputScale, outputScale);
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.fillStyle = "#ffffff";
          ctx.fillRect(0, 0, viewport.width, viewport.height);
          const renderContext = {
            canvasContext: ctx,
            viewport
          };
          await page.render(renderContext).promise;
        } catch (error) {
          console.error("Error rendering page:", error);
          this.createErrorElement(canvasContainer, `Error rendering page ${pageNum}: ${error.message}`);
        }
      };
      prevBtn.addEventListener("click", async () => {
        if (currentPage > 1) {
          currentPage--;
          updatePageDisplay();
          await renderPage(currentPage);
        }
      });
      nextBtn.addEventListener("click", async () => {
        if (currentPage < pdf.numPages) {
          currentPage++;
          updatePageDisplay();
          await renderPage(currentPage);
        }
      });
      zoomInBtn.addEventListener("click", async () => {
        if (fitToWidth) {
          fitToWidth = false;
          scale = await calculateFitToWidthScale(currentPage);
        }
        if (scale < maxScale) {
          scale = Math.min(scale * 1.25, maxScale);
          updateZoomDisplay();
          await renderPage(currentPage);
        }
      });
      zoomOutBtn.addEventListener("click", async () => {
        if (fitToWidth) {
          fitToWidth = false;
          scale = await calculateFitToWidthScale(currentPage);
        }
        if (scale > minScale) {
          scale = Math.max(scale / 1.25, minScale);
          updateZoomDisplay();
          await renderPage(currentPage);
        }
      });
      fitWidthBtn.addEventListener("click", async () => {
        fitToWidth = !fitToWidth;
        updateZoomDisplay();
        await renderPage(currentPage);
      });
      const handleKeydown = async (e) => {
        if (e.target !== viewerContainer && !viewerContainer.contains(e.target)) {
          return;
        }
        switch (e.key) {
          case "ArrowLeft":
          case "ArrowUp":
          case "PageUp":
            e.preventDefault();
            if (currentPage > 1) {
              currentPage--;
              updatePageDisplay();
              await renderPage(currentPage);
            }
            break;
          case "ArrowRight":
          case "ArrowDown":
          case "PageDown":
          case " ":
            e.preventDefault();
            if (currentPage < pdf.numPages) {
              currentPage++;
              updatePageDisplay();
              await renderPage(currentPage);
            }
            break;
          case "Home":
            e.preventDefault();
            if (currentPage !== 1) {
              currentPage = 1;
              updatePageDisplay();
              await renderPage(currentPage);
            }
            break;
          case "End":
            e.preventDefault();
            if (currentPage !== pdf.numPages) {
              currentPage = pdf.numPages;
              updatePageDisplay();
              await renderPage(currentPage);
            }
            break;
          case "+":
          case "=":
            e.preventDefault();
            if (fitToWidth) {
              fitToWidth = false;
              scale = await calculateFitToWidthScale(currentPage);
            }
            if (scale < maxScale) {
              scale = Math.min(scale * 1.25, maxScale);
              updateZoomDisplay();
              await renderPage(currentPage);
            }
            break;
          case "-":
            e.preventDefault();
            if (fitToWidth) {
              fitToWidth = false;
              scale = await calculateFitToWidthScale(currentPage);
            }
            if (scale > minScale) {
              scale = Math.max(scale / 1.25, minScale);
              updateZoomDisplay();
              await renderPage(currentPage);
            }
            break;
          case "0":
            e.preventDefault();
            fitToWidth = true;
            updateZoomDisplay();
            await renderPage(currentPage);
            break;
        }
      };
      viewerContainer.tabIndex = 0;
      viewerContainer.addEventListener("keydown", handleKeydown);
      if (this.isMobileDevice()) {
        let startX = 0;
        let startY = 0;
        let startScale = scale;
        let initialDistance = 0;
        let isPinching = false;
        const getTouchDistance = (touches) => {
          if (touches.length < 2) return 0;
          const dx = touches[0].clientX - touches[1].clientX;
          const dy = touches[0].clientY - touches[1].clientY;
          return Math.sqrt(dx * dx + dy * dy);
        };
        canvasContainer.addEventListener("touchstart", async (e) => {
          if (e.touches.length === 1) {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
            isPinching = false;
          } else if (e.touches.length === 2) {
            e.preventDefault();
            initialDistance = getTouchDistance(e.touches);
            startScale = fitToWidth ? await calculateFitToWidthScale(currentPage) : scale;
            isPinching = true;
            fitToWidth = false;
          }
        });
        canvasContainer.addEventListener("touchmove", async (e) => {
          if (e.touches.length === 2 && isPinching) {
            e.preventDefault();
            const currentDistance = getTouchDistance(e.touches);
            if (initialDistance > 0) {
              const scaleChange = currentDistance / initialDistance;
              const newScale = Math.max(minScale, Math.min(maxScale, startScale * scaleChange));
              if (Math.abs(newScale - scale) > 0.05) {
                scale = newScale;
                updateZoomDisplay();
                await renderPage(currentPage);
              }
            }
          }
        });
        canvasContainer.addEventListener("touchend", async (e) => {
          if (e.changedTouches.length === 1 && e.touches.length === 0 && !isPinching) {
            const endX = e.changedTouches[0].clientX;
            const endY = e.changedTouches[0].clientY;
            const deltaX = endX - startX;
            const deltaY = endY - startY;
            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
            if (distance > 50) {
              if (Math.abs(deltaX) > Math.abs(deltaY)) {
                if (deltaX > 0 && currentPage > 1) {
                  currentPage--;
                  updatePageDisplay();
                  await renderPage(currentPage);
                } else if (deltaX < 0 && currentPage < pdf.numPages) {
                  currentPage++;
                  updatePageDisplay();
                  await renderPage(currentPage);
                }
              }
            }
          }
          isPinching = false;
        });
        canvasContainer.addEventListener("touchstart", (e) => {
          if (e.touches.length > 1) {
            e.preventDefault();
          }
        }, { passive: false });
      }
      updatePageDisplay();
      updateZoomDisplay();
      if (this.isMobileDevice()) {
        fitToWidth = true;
        updateZoomDisplay();
      }
      await renderPage(currentPage);
      if (this.isMobileDevice()) {
        const helpText = viewerContainer.createEl("div", {
          cls: "external-pdf-mobile-help"
        });
        helpText.textContent = 'Swipe left/right for pages \u2022 Pinch to zoom \u2022 Tap "Fit" to fit width';
      }
    } catch (error) {
      console.error("Error creating PDF.js viewer:", error);
      throw error;
    }
  }
  async renderExternalPDF(source, el, ctx) {
    const lines = source.trim().split("\n");
    const url = lines[0].trim();
    if (!url) {
      this.createErrorElement(el, "Error: No PDF URL provided");
      return;
    }
    if (!this.isValidURL(url)) {
      this.createErrorElement(el, "Error: Invalid URL provided");
      return;
    }
    if (!this.isDomainAllowed(url)) {
      const errorMsg = this.settings.restrictDomains ? `Error: Domain not allowed. Allowed domains: ${this.settings.allowedDomains.join(", ")}` : "Error: Only HTTPS URLs are allowed for security reasons";
      this.createErrorElement(el, errorMsg);
      return;
    }
    const options = this.parseOptions(lines);
    const isMobile = this.isMobileDevice();
    const container = el.createEl("div", {
      cls: "external-pdf-container" + (isMobile ? " external-pdf-mobile" : "")
    });
    if (options.title) {
      container.createEl("h3", {
        text: options.title,
        cls: "external-pdf-title"
      });
    }
    const loadingEl = this.createLoadingElement(container);
    try {
      await this.loadPDFJS();
      const pdfData = await this.fetchPDFData(url);
      loadingEl.remove();
      await this.createPDFJSViewer(container, pdfData, options);
    } catch (error) {
      console.error("Error loading PDF:", error);
      loadingEl.remove();
      const errorMsg = container.createEl("div", {
        cls: "external-pdf-error"
      });
      errorMsg.textContent = `Failed to load PDF: ${error.message}`;
      const fallbackLink = container.createEl("p", {
        cls: "external-pdf-fallback"
      });
      fallbackLink.innerHTML = `<a href="${url}" target="_blank" rel="noopener noreferrer">Open PDF in browser</a>`;
    }
    this.addStyles();
  }
  addStyles() {
    if (this.stylesAdded || document.querySelector("#external-pdf-styles")) return;
    const style = document.createElement("style");
    style.id = "external-pdf-styles";
    style.textContent = `
            .external-pdf-container {
                margin: 1em 0;
                padding: 0.5em;
                border: 1px solid var(--background-modifier-border);
                border-radius: 8px;
                background: var(--background-primary);
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            
            .external-pdf-title {
                margin: 0 0 0.5em 0;
                font-size: 1.1em;
                color: var(--text-normal);
                font-weight: 600;
            }
            
            .external-pdf-loading {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                padding: 2em;
                text-align: center;
            }
            
            .external-pdf-spinner {
                width: 32px;
                height: 32px;
                border: 3px solid var(--background-modifier-border);
                border-top: 3px solid var(--text-accent);
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin-bottom: 1em;
            }
            
            .external-pdf-loading-text {
                color: var(--text-muted);
                font-size: 0.9em;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            .external-pdf-viewer {
                border: 1px solid var(--background-modifier-border);
                border-radius: 8px;
                background: var(--background-secondary);
                padding: 0.5em;
                outline: none;
            }
            
            .external-pdf-controls {
                display: flex;
                align-items: center;
                justify-content: space-between;
                flex-wrap: wrap;
                gap: 0.5em;
                padding: 0.5em;
                background: var(--background-primary);
                border-radius: 6px;
                margin-bottom: 0.5em;
                border: 1px solid var(--background-modifier-border);
            }
            
            .external-pdf-page-controls {
                display: flex;
                align-items: center;
                gap: 0.5em;
            }
            
            .external-pdf-nav-btn {
                background: var(--interactive-normal);
                color: var(--text-normal);
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
                padding: 0.5em 0.75em;
                cursor: pointer;
                font-size: 1.1em;
                font-weight: bold;
                transition: all 0.2s ease;
                min-width: 36px;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .external-pdf-nav-btn:hover:not(:disabled) {
                background: var(--interactive-hover);
                border-color: var(--background-modifier-border-hover);
            }
            
            .external-pdf-nav-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }
            
            .external-pdf-page-display {
                font-size: 0.9em;
                color: var(--text-normal);
                font-weight: 500;
                padding: 0 0.75em;
                white-space: nowrap;
            }
            
            .external-pdf-zoom-controls {
                display: flex;
                align-items: center;
                gap: 0.25em;
            }
            
            .external-pdf-zoom-btn, .external-pdf-fit-btn {
                background: var(--interactive-normal);
                color: var(--text-normal);
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
                cursor: pointer;
                font-size: 1em;
                font-weight: bold;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s ease;
            }
            
            .external-pdf-zoom-btn {
                width: 32px;
                height: 32px;
            }
            
            .external-pdf-fit-btn {
                padding: 0.5em 0.75em;
                font-size: 0.8em;
            }
            
            .external-pdf-fit-btn.active {
                background: var(--text-accent);
                color: var(--text-on-accent);
                border-color: var(--text-accent);
            }
            
            .external-pdf-zoom-btn:hover:not(:disabled),
            .external-pdf-fit-btn:hover:not(:disabled) {
                background: var(--interactive-hover);
                border-color: var(--background-modifier-border-hover);
            }
            
            .external-pdf-fit-btn.active:hover {
                background: var(--text-accent-hover);
                border-color: var(--text-accent-hover);
            }
            
            .external-pdf-zoom-btn:disabled,
            .external-pdf-fit-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }
            
            .external-pdf-zoom-display {
                font-size: 0.85em;
                color: var(--text-normal);
                min-width: 50px;
                text-align: center;
                font-weight: 500;
            }
            
            .external-pdf-canvas-container {
                text-align: center;
                overflow: auto;
                max-height: 70vh; /* Default fallback */
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
                background: #f8f8f8;
                padding: 1em;
                scroll-behavior: smooth;
            }
            
            .external-pdf-canvas {
                max-width: 100%;
                height: auto;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                border-radius: 4px;
                display: block;
                margin: 0 auto;
            }
            
            .external-pdf-mobile-help {
                text-align: center;
                font-size: 0.8em;
                color: var(--text-muted);
                padding: 0.5em;
                margin-top: 0.5em;
                background: var(--background-primary);
                border-radius: 6px;
                border: 1px solid var(--background-modifier-border);
            }
            
            .external-pdf-error {
                color: var(--text-error);
                background: var(--background-primary-alt);
                padding: 1em;
                border-radius: 6px;
                border: 1px solid var(--text-error);
                margin: 0.5em 0;
                text-align: center;
            }
            
            .external-pdf-fallback {
                text-align: center;
                margin-top: 0.5em;
            }
            
            .external-pdf-fallback a {
                color: var(--text-accent);
                text-decoration: none;
                font-weight: 500;
            }
            
            .external-pdf-fallback a:hover {
                text-decoration: underline;
            }
            
            /* Mobile-specific styles */
            .external-pdf-mobile .external-pdf-controls {
                flex-direction: column;
                gap: 0.75em;
            }
            
            .external-pdf-mobile .external-pdf-page-controls {
                order: 1;
                justify-content: center;
            }
            
            .external-pdf-mobile .external-pdf-zoom-controls {
                order: 2;
                justify-content: center;
            }
            
            .external-pdf-mobile .external-pdf-nav-btn {
                min-width: 44px;
                height: 44px;
                font-size: 1.2em;
            }
            
            .external-pdf-mobile .external-pdf-zoom-btn {
                width: 44px;
                height: 44px;
                font-size: 1.1em;
            }
            
            .external-pdf-mobile .external-pdf-fit-btn {
                padding: 0.75em 1em;
                height: 44px;
                font-size: 0.9em;
            }
            
            .external-pdf-mobile .external-pdf-canvas-container {
                max-height: 60vh;
                padding: 0.5em;
            }
            
            .external-pdf-mobile .external-pdf-page-display {
                font-size: 1em;
                padding: 0 1em;
            }
            
            .external-pdf-mobile .external-pdf-zoom-display {
                font-size: 0.9em;
                min-width: 60px;
            }
            
            /* Dark mode adjustments */
            .theme-dark .external-pdf-canvas-container {
                background: #2a2a2a;
            }
            
            /* Responsive breakpoints */
            @media (max-width: 768px) {
                .external-pdf-controls {
                    flex-direction: column;
                    gap: 0.75em;
                }
                
                .external-pdf-nav-btn {
                    min-width: 40px;
                    height: 40px;
                }
                
                .external-pdf-zoom-btn {
                    width: 40px;
                    height: 40px;
                }
                
                .external-pdf-canvas-container {
                    max-height: 50vh;
                }
            }
            
            /* Focus styles for accessibility */
            .external-pdf-viewer:focus {
                box-shadow: 0 0 0 2px var(--text-accent);
            }
            
            .external-pdf-nav-btn:focus,
            .external-pdf-zoom-btn:focus,
            .external-pdf-fit-btn:focus {
                outline: 2px solid var(--text-accent);
                outline-offset: 2px;
            }
            
            /* Smooth transitions */
            .external-pdf-canvas {
                transition: transform 0.2s ease;
            }
            
            /* Loading animation refinements */
            @media (prefers-reduced-motion: reduce) {
                .external-pdf-spinner {
                    animation: none;
                    border: 3px solid var(--text-accent);
                }
                
                .external-pdf-canvas {
                    transition: none;
                }
            }

            /* Settings tab styles */
            .external-pdf-info {
                background: var(--background-secondary);
                padding: 1em;
                border-radius: 8px;
                margin-bottom: 1em;
                border: 1px solid var(--background-modifier-border);
            }
            
            .external-pdf-info h3 {
                margin-top: 1em;
                margin-bottom: 0.5em;
                color: var(--text-accent);
            }
            
            .external-pdf-info ul {
                margin: 0.5em 0;
                padding-left: 1.5em;
            }
            
            .external-pdf-info li {
                margin: 0.25em 0;
            }
            
            .external-pdf-info code {
                background: var(--background-primary-alt);
                padding: 0.2em 0.4em;
                border-radius: 4px;
                font-size: 0.9em;
            }
            
            .external-pdf-info pre {
                background: var(--background-primary-alt);
                padding: 1em;
                border-radius: 6px;
                margin: 0.5em 0;
                overflow-x: auto;
            }
            
            .external-pdf-info pre code {
                background: none;
                padding: 0;
            }

        `;
    document.head.appendChild(style);
    this.stylesAdded = true;
  }
  onunload() {
    if (this.pdfJsLoaded && window.pdfjsLib) {
    }
    const existingStyle = document.querySelector("#external-pdf-styles");
    if (existingStyle) {
      existingStyle.remove();
    }
    this.stylesAdded = false;
    this.pdfJsLoaded = false;
    this.loadingPromise = null;
    console.log("External PDF Plugin unloaded");
  }
};
